package com.infy.assignment;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class ParallelStreamDemo {
	 private static final String DIR = System.getProperty("user.dir") + "/test/";

    public static void main(String[] args) throws IOException {
    	 Files.createDirectories(Paths.get(DIR));

        ParallelStreamDemo obj = new ParallelStreamDemo();

        List<Employee> employees = obj.generateEmployee(500);

        employees.parallelStream().forEach(ParallelStreamDemo::save); 
    }

    private static void save(Employee input)  {

		
		  try (FileOutputStream fos = new FileOutputStream(new File(DIR +
		  input.getName() + ".txt")); ObjectOutputStream obs = new
		  ObjectOutputStream(fos)) { obs.writeObject(input); } catch (IOException e) {
		  e.printStackTrace(); }

    }

    private List<Employee> generateEmployee(int num) {

        return Stream.iterate(0, n -> n + 1)
                .limit(num)
                .map(x -> {
                    return new Employee(generateRandomName(4),generateRandomAge(15, 100),generateRandomSalary(900, 200000));
                })
                .collect(Collectors.toList());

    }

    private String generateRandomName(int length) {

        return new Random()
                .ints(5, 97, 122) // 97 = a , 122 = z
                .mapToObj(x -> String.valueOf((char) x))
                .collect(Collectors.joining());

    }

    private int generateRandomAge(int min, int max) {
        return new Random()
                .ints(1, min, max)
                .findFirst()
                .getAsInt();
    }

    private BigDecimal generateRandomSalary(long min, long max) {
        return new BigDecimal(new Random()
                .doubles(1, min, max)
                .findFirst()
                .getAsDouble()).setScale(2, RoundingMode.HALF_UP);
    }

}

